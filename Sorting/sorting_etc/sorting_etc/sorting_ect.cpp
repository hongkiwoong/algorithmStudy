

/*
	선택 정렬 : 최소값을 찾아서 배열의 왼쪽부터 정렬하는 스타일, 
				배열의 왼쪽 수 기준으로 하나씩 비교해가며 최소값을 찾아 바꿔준다.
	            두 개의 for문을 거치며 시간복잡도는 O ( n^2 )
				예 ) 4 7 2 5 6
				     2 7 4 5 6
					 2 5 7 4 6
					 2 5 4 7 6
					 2 5 4 6 7
		
	삽입 정렬 : 배열의 왼쪽 수 부터 하나씩 '삽입' 한다고 생각.
				비교 기준이 되는 수보다 작으면 비교 당하는 수를 왼쪽으로 배치.
				두 개의 for문을 거치며 시간복잡도는 O ( n^2 )
				예 ) 4 7 2 5 6
					 4 7 2 5 6
					 2 4 7 5 6
					 2 4 5 7 6  
					 2 4 5 6 7
	버블 : 알지?

	쉘 정렬 : 나누어서 생각한다. 나누는 기준은 h 값에 따라 나누어 지는데, 쉘 정렬은 
			  데이터의 개수가 많으면 많을 수록 좋은 성능을 보인다. 이유는 비교횟수와 이동횟수가 줄기 때문이다.
			  따라서 시간 복잡도는 O ( n (logn)^2 ) 이다.
			  예 ) 4 7 2 5 6     h = 2
			       ( 4 , 7 , 2 ) | ( 5 , 6 )    4와 5비교, 7과 6 비교  2유지
 				   ( 4 ) | ( 5 , 2 ) | ( 6 ) | ( 7 )    첫번째 인덱스 비교 (4, 7, 5), 두번째 인덱스 비교 (2, 7)
				   4 | 5 | 2 | 6 | 7   -> 삽입정렬 시작
				   2 4 5 6 7

	
*/